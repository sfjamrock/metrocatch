<?php
/**
 * @file
 * Contains hook implementations, api functions and helpers, theming callbacks.
 */

include_once('metrocatch_gallery.features.inc');

/**
 * @name hooks Hook implementations.
 * @{
 */

/**
 * Implementation of hook_menu().
 */
function metrocatch_gallery_menu() {
  return array(
    'metrocatch-gallery/manage/%user' => array(
      'type' => MENU_CALLBACK,
      'title' => 'Manage gallery',
      'access callback' => 'metrocatch_gallery_manage_access',
      'access arguments' => array(2),
      'page callback' => 'metrocatch_gallery_manage_page',
      'page arguments' => array(2, 3),
      'file' => 'metrocatch_gallery.pages.inc',
    ),
    'metrocatch-gallery/manage/%user/%node' => array(
      'type' => MENU_CALLBACK,
      'access callback' => 'metrocatch_gallery_manage_access',
      'access arguments' => array(2, 3),
    ),
    'ajax-metrocatch-gallery-manage-form/%' => array(
      'type' => MENU_CALLBACK,
      'access callback' => 'user_is_logged_in',
      'page callback' => 'metrocatch_gallery_manage_form_ajax',
      'page arguments' => array(1),
      'file' => 'metrocatch_gallery.pages.inc',
    ),
    'ajax-metrocatch-gallery-change-weights' => array(
      'type' => MENU_CALLBACK,
      'access callback' => 'user_is_logged_in',
      'page callback' => 'metrocatch_gallery_change_weights_ajax',
      'file' => 'metrocatch_gallery.pages.inc',
    ),
    'ajax-metrocatch-gallery-browse/%user' => array(
      'type' => MENU_CALLBACK,
      'access callback' => TRUE,
      'page callback' => 'metrocatch_gallery_browse_ajax',
      'page arguments' => array(1),
      'file' => 'metrocatch_gallery.pages.inc',
    ),
    'admin/metrocatch/gallery' => array(
      'title' => 'Gallery',
      'access arguments' => array('administer metrocatch galleries'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('metrocatch_gallery_settings_form'),
      'file' => 'metrocatch_gallery.admin.inc',
    ),
  );
}

/**
 * Implementation of hook_perm().
 */
function metrocatch_gallery_perm() {
  return array('administer metrocatch galleries');
}

/**
 * Implementation of hook_theme().
 */
function metrocatch_gallery_theme() {
  $module_path = drupal_get_path('module', 'metrocatch_gallery');
  $template_path = $module_path .'/templates';
  return array(
    'metrocatch_gallery_manage_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'metrocatch-gallery-manage-form',
      'path' => $template_path,
    ),
    'metrpocatch_gallery_manage_form_gallery' => array(
      'arguments' => array('element' => NULL),
      'template' => 'metrocatch-gallery-manage-form-gallery',
      'path' => $template_path,
    ),
    'metrocatch_gallery_contols' => array(
      'arguments' => array('view' => NULL, 'jcarousel_id' => NULL),
    ),
  );
}

/**
 * Implementation of hook_theme_registry_alter().
 */
function metrocatch_gallery_theme_registry_alter(&$info) {
  $jcarousel_preprocess = &$info['metrocatch_gallery_jcarousel']['preprocess functions'];
  array_unshift($jcarousel_preprocess, 'template_preprocess_jcarousel_view');
  $page_preprocess = &$info['page']['preprocess functions'];
  array_unshift($page_preprocess, 'metrocatch_gallery_preprocess_gallery_page');
  array_unshift($info['page']['theme paths'], drupal_get_path('module', 'metrocatch_gallery'));
}

/**
 * Implementation of hook_flag().
 */
function metrocatch_gallery_flag($action, $flag, $content_id, $account) {
  if ($action == 'flag' && $flag->name == 'metrocatch_gallery_inappropriate') {
    $picture = node_load($content_id);
    $owner = user_load($picture->uid);
    $metromail_creator = mailcreators_get_creator('metrocatch_gallery_inappropriate_picture_notification');
    $params = array(
      'account' => $account,
      'picture' => $picture,
      'owner' => $owner,
    );
    foreach ($metromail_creator->send($params) as $result) {
      if (!$result['status']) {
        watchdog('metrocatch_gallery',
        'Error occured while sending notification from @username about inappropriate <a href="@picture_url">picture</a> in @gallery_owner\'s gallery. Result: @result',
        array('@username' => $account->name, '@picture_url' => url('node/'. $picture->nid, array('absolute' => TRUE)), '@gallery_owner' => $owner->name, '@result' => print_r($result, TRUE)), WATCHDOG_ERROR);
      }
    }
  }
}

/**
 * Implementation of hook_jcarousel_skin_info().
 */
function metrocatch_gallery_jcarousel_skin_info() {
  return array(
    'metrocatch_gallery' => array(
      'title' => t('Metrocatch Gallery'),
      'file' => 'metrocatch_gallery.skin.css',
    ),
  );
}

/**
 * Implementation of hook_mailcreators_info().
 */
function metrocatch_gallery_mailcreators_info() {
  return array(
    'metrocatch_gallery_inappropriate_picture_notification' => array(
      'class' => 'metrocatchGalleryInappropriatePictureNotificationCreator',
      'parent' => NULL,
      'file' => 'metrocatch_gallery.mailcreators.inc',
    ),
  );
}

/**
 * Implementation of hook_popup_forms_data().
 */
function metrocatch_gallery_popup_forms_data() {
  return array(
    'metrocatch_gallery_manage_form' => array(
      'params' => array('uid' => 0),
      'close_buttons' => array('okay'),
      'file' => drupal_get_path('module', 'metrocatch_gallery') .'/metrocatch_gallery.pages.inc',
    ),
  );
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function metrocatch_gallery_form_user_login_alter(&$form, &$form_state) {
  if (!empty($_GET['messages']) && ($messages = json_decode($_GET['messages']))) {
    foreach ($messages as $message) {
      drupal_set_message(check_plain($message), 'warning');
    }
    $form['#submit'][] = 'metrocatch_gallery_clear_messages';
  }
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function metrocatch_gallery_form_metrocatch_connect_connect_form_alter(&$form, &$form_state) {
  if (!empty($_GET['messages']) && ($messages = json_decode($_GET['messages']))) {
    foreach ($messages as $message) {
      drupal_set_message(check_plain($message), 'warning');
    }
    $form['#submit'][] = 'metrocatch_gallery_clear_messages';
  }
}

/**
 * @} End of "name hooks".
 */

/**
 * @name api API implementations.
 * @{
 */

/**
 * Access callback for the Manage gallery page.
 *
 * Checks whether current user has permission to manage all galleries
 * or if he is viewing owm gallery.
 *
 * @param $account
 *   An account of user whose gallery is about to display.
 */
function metrocatch_gallery_manage_access($account, $edit = NULL) {
  global $user;
  if (!empty($edit)) {
    // User wants to edit a single picture.
    return node_access('update', $edit);
  }
  return user_access('administer metrocatch galleries') || (!empty($user->uid) && ($user->uid == $account->uid));
}

/**
 * Load user gallery.
 *
 * @param $uid
 *  The UID of the user whose gallery to load.
 *
 * @return
 *   An array of gallery nodes.
 */
function metrocatch_gallery_load_gallery($uid) {
  $nodes = array();
  $result = db_query(db_rewrite_sql("SELECT n.nid FROM {node} n WHERE n.uid = %d AND n.type = '%s'", 'n', 'nid', array('uid' => $uid)), $uid, 'metrocatch_gallery_picture');
  while ($nid = db_result($result)) {
    if ($node = node_load($nid, NULL, TRUE)) {
      $nodes[$nid] = $node;
    }
  }
  return $nodes;
}

/**
 * Get the number of pictures in user gallery.
 *
 * @param $uid
 *   Integer containing the UID of the user whose pictures to count.
 *
 * @return
 *   An integer containing the number of pictures in user gallery.
 */
function metrocatch_gallery_count_photos($uid) {
  return db_result(db_query("SELECT COUNT(nid) FROM {node} WHERE status <> 0 AND uid = %d AND type = '%s'", $uid, 'metrocatch_gallery_picture'));
}

/**
 * @} End of "name api".
 */

/**
 * @name helper Helper functions.
 * @{
 */

/**
 * Array sort callback: sorts gallery pictures by weight.
 */
function metrocatch_gallery_sort_pictures($a, $b) {
  $a_weight = isset($a->field_picture_weight[0]['value']) ? $a->field_picture_weight[0]['value'] : 0;
  $b_weight = isset($b->field_picture_weight[0]['value']) ? $b->field_picture_weight[0]['value'] : 0;
  if ($a_weight == $b_weight) {
    return 0;
  }
  return ($a_weight < $b_weight) ? -1 : 1;
}

/**
 * Helper function: preprocess additional variables for a profile template.
 */
function metrocatch_gallery_preprocess_profile(&$vars) {
  global $user;
  $account = $vars['account'];
  popup_forms_parent_js();
  jquery_ui_add(array('ui.dialog'));
  drupal_add_js(drupal_get_path('module', 'metrocatch_gallery') .'/metrocatch_gallery.js');
  $photos = metrocatch_gallery_count_photos($account->uid);
  $count_photos = format_plural($photos, 'Photo <b>(@count)</b>', 'Photos (@count)');
  if (!empty($photos)) {
    // JS settings.
    $settings = array();
    // User has access to the gallery.
    if (metrocatch_gallery_manage_access($account) || metrocatch_connect_users_are_connected($user->uid, $account->uid)) {
      $count_photos_url = 'metrocatch-gallery/'. $account->uid;
      $settings['metrocatch_gallery'] = array(
        'popup_title' => check_plain($account->name),
      );
    }
    else {
      $settings['metrocatch_gallery'] = array(
        'uid_from' => $user->uid,
        'to_name' => $account->name,
        'messages' => array(),
      );
      $profile = metrocatch_profile_get_profile($account->uid);
      $his_her = ($profile->field_profile_sex[0]['value'] == 'man' ? 'his' : 'her');
      $settings['metrocatch_gallery']['messages'][] = t('You should be connected with @username in order to view @his_her photos.', array('@username' => $account->name, '@his_her' => $his_her));
      if (empty($user->uid)) {
        $settings['metrocatch_gallery']['login'] = TRUE;
        $settings['metrocatch_gallery']['messages'][] = t('Please log in to connect with @username', array('@username' => $account->name));
      }
      elseif ($pending_connection = metrocatch_connect_load_users_connection($user->uid, $account->uid, 'pending')) {
        if ($pending_connection['uid_from'] == $user->uid) {
          $settings['metrocatch_gallery']['messages'][] = t('@username is considering your request<br/> (@left).', array('@username' => $account->name, '@left' => _metrocatch_connect_days_left_text($pending_connection['expiration_time'])));
        }
        else {
          $options = array('query' => array('destination' => 'user/'. $account->uid));
          $accept = metrocatch_connect_get_connection_transition_link($pending_connection, 'temporary', $user, $options);
          $deny = metrocatch_connect_get_connection_transition_link($pending_connection, 'denied', $user, $options);
          $settings['metrocatch_gallery']['messages'][] = t("@username has requested connection with you.<br/> !accept or !deny?", array('@username' => $account->name, '!accept' => $accept, '!deny' => $deny));
        }
      }
      else {
        $settings['metrocatch_gallery']['connect'] = TRUE;
      }
      $count_photos_url = 'connect/new/'. $account->uid;
    }
    drupal_add_js($settings, 'setting');
    $vars += array(
      'count_photos' => l($count_photos, $count_photos_url, array('html' => TRUE, 'attributes' => array('id' => 'metrocatch-gallery-browse-'. $account->uid, 'class' => 'metrocatch-gallery-browse'))),
    );
  }
  else {
    $vars += array(
      'count_photos' => '<a href="#">'. $count_photos .'</a>',
    );
  }
  if (metrocatch_gallery_manage_access($account)) {
    $vars += array(
      'add_photos' => l(t('Add photos'), 'metrocatch-gallery/manage/'. $account->uid, array('attributes' => array('id' => 'metrocatch-gallery-manage-'. $account->uid, 'class' => 'metrocatch-gallery-manage'), 'query' => drupal_get_destination())),
    );
  }
}

/**
 * Additional submit handler for the login form.
 *
 * Clears status messages.
 */
function metrocatch_gallery_clear_messages($form, &$form_state) {
  drupal_get_messages();
}


/**
 * @} End of "name helper".
 */

/**
 * @name theme Theme implementations.
 * @{
 */

/**
 * Preprocess variables for the Manage Gallery form.
 */
function template_preprocess_metrocatch_gallery_manage_form(&$vars) {
  $module_path = drupal_get_path('module', 'metrocatch_gallery');
  drupal_add_css($module_path .'/metrocatch_gallery.css');
  drupal_add_js($module_path .'/metrocatch_gallery.js');
  jquery_ui_add(array('ui.sortable', 'ui.draggable'));
  $form = $vars['form'];
  $vars += array(
    'title' => t('Manage Gallery'),
    'rendered_form' => drupal_render($form),
  );
}

/**
 * Preprocess variables for a user gallery in the Manage Gallery form.
 */
function template_preprocess_metrpocatch_gallery_manage_form_gallery(&$vars) {
  $element = $vars['element'];
  $nodes = $element['#nodes'];
  $edit = $element['#edit'];
  uasort($nodes, 'metrocatch_gallery_sort_pictures');
  $account = $element['#account'];
  $vars += array(
    'nodes' => $nodes,
    'account' => $account,
    'edit' => $edit,
  );
}

/**
 * Return HTML output of a jCarousel gallery control buttons.
 *
 * @param $view
 *   View object.
 * @param $jcarousel_id
 *   An integer identifier of the current jCarousel.
 */
function theme_metrocatch_gallery_contols($view, $jcarousel_id) {
  $output = '';
  $output .= '<div class="metrocatch-gallery-controls">';
  foreach (array('prev', 'control', 'next') as $action) {
    $classes = array();
    $classes[] = 'metrocatch-gallery-action';
    $classes[] = 'jcarousel-'. $action;
    if ($action == 'control') {
      $classes[]= 'play'; // Paused by default.
    }
    $output .= '<div class="'. implode(' ', $classes) .'">';
    $output .= '</div>';
  }
  $output .= '</div>';
  return $output;
}

/**
 * Preprocess additional variables for the Profile teaser template.
 */
function metrocatch_gallery_preprocess_metrocatch_connect_profile_teaser(&$vars) {
  metrocatch_gallery_preprocess_profile($vars);
}

/**
 * Preprocess additional variables for the Profile featured template.
 */
function metrocatch_gallery_preprocess_metrocatch_connect_profile_featured(&$vars) {
  metrocatch_gallery_preprocess_profile($vars);
}

/**
 * Additional preprocess function for the User gallery page.
 *
 * Do not render blocks.
 */
function metrocatch_gallery_preprocess_gallery_page(&$vars) {
  global $metrocatch_gallery_browse_page;
  if (!empty($metrocatch_gallery_browse_page)) {
    $vars['show_blocks'] = FALSE;
  }
}

/**
 * @} End of "name theme".
 */
