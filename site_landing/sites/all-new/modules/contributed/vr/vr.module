<?php
// $Id: vr.module,v 1.5.2.20 2010/07/13 16:47:57 jbomb Exp $

/**
 * hook_perm implementation
 */
function vr_perm() {
  return array(
    'administer VerticalResponse',
  );
}

/**
 * hook_menu implementation
 */
function vr_menu() {
  $items['admin/settings/vr'] = array(
    'title' => t('VerticalResponse'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vr_settings_form'),
    'access arguments' => array('administer VerticalResponse'),
    'file' => 'vr.admin.inc',
  );
  return $items;
}

/**
 * hook_user implementation
 *
 * Allow users to unsubscribe to mailing lists.
 */
function vr_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'categories':
      return array(
        array(
          'name' => 'vr_lists',
          'title' => t('Mailing List Settings'),
          'weight' => 1,
          ),
        );
      break;
    case 'form':
      if ($category == 'vr_lists') {
        $lists = vr_get_lists();
        $param['field_name'] = 'email_address';
        $param['field_value'] = $account->mail;

        foreach ($lists as $list_id => $list_name) {
          // Skip list if user doesn't have access to it.
          $list_enabled = variable_get('vr_list_enabled_' . $list_id, FALSE);
          if ($list_enabled != TRUE AND !user_access('administer VerticalResponse')) {
            continue;
          }
          // Present list as signup option.
          $options[$list_id] = $list_name;
          // Determine if this user is a list member.
          $param['list_id'] = $list_id;
          $member = vr_api('searchListMembers', $param);
          if (!empty($member)) {
            $member = current($member);
            // fetch member hash so that we can remove this member from
            // the mailing list.
            foreach ($member->member_data as $property) {
              if ($property->name == 'hash') {
                $default_hash[$list_id] = $property->value;
              }
            }
          }
        }
        $form['default_hash'] = array(
          '#type' => 'value',
          '#value' => is_array($default_hash) ? $default_hash : array(),
          );
        // Track the available options for this transaction.
        $form['list_options'] = array(
          '#type' => 'value',
          '#value' => is_array($options) ? $options : array(),
          );
        $form['newsletters'] = array(
          '#type' => 'item',
          '#value' => t('Use this form to unsubscribe from the following mailing lists.'),
          );
        $form['subscriptions'] = array(
          '#type' => 'checkboxes',
          '#title' => t('Subscriptions'),
          '#options' => is_array($options) ? $options : array(),
          '#description' => is_array($options)
                         ? NULL : t('There are no lists to manage at this time.'),
          );
        if (!empty($default_hash)) {
          $form['subscriptions']['#default_value'] = array_keys($default_hash);
        }
        return $form;
      }
      break;
    case 'update':
      if ($category == 'vr_lists') {
        $old_subscription_ids = array_keys($edit['default_hash']);
        $new_subscription_ids = $edit['subscriptions'];

        foreach ($edit['list_options'] as $list_id => $list_name) {
          // Was the user subscribed before submitting this form, are they now?
          $subscribed_current = in_array($list_id, $old_subscription_ids);
          $subscribed_new = in_array($list_id, $new_subscription_ids);
          if ($subscribed_current == $subscribed_new) {
            // List status has not changed; no action is required.
            continue;
          }
          elseif ($subscribed_new == FALSE) {
            // Previously subscribed user should be removed from list.
            $param['list_member']['list_id'] = $list_id;
            $param['list_member']['member_data'] = array(
              array(
                'name' => 'hash',
                'value' => $edit['default_hash'][$list_id],
                ),
              );
            vr_api('deleteListMember', $param);
          }
          else {
            // previously subscribed user should be added to list.
            $param['list_member']['list_id'] = $list_id;
            $param['list_member']['member_data'] = array(
              array(
                'name' => 'email_address',
                'value' => $account->mail,
                ),
              );
            vr_api('addListMember', $param);
          }
        }
        unset($edit['subscriptions'], $edit['default_hash'], $edit['list_options']);
      }
      break;
  }
}

/**
 * Consume webservices from VerticalResponse.
 *
 * @return mixed
 *  A session_id for a successful connection or a VerticalResponse API
 *  object.
 */
function _vr_init($session_id = FALSE) {
  $vr_user = variable_get('vr_username', NULL);
  $vr_password = variable_get('vr_password', NULL);
  if (empty($vr_user) OR empty($vr_password)) {
    $options = array(
      'query' => array(
        'destination' => request_uri(),
        ),
      );
    $message = t('VerticalResponse is not configured.  Please visit the
                  <a href="@url">settings</a> page.', array('@url' => url('admin/settings/vr', $options)));
    drupal_set_message($message, 'warning', FALSE);
    return FALSE;
  }
  $wsdl = 'https://api.verticalresponse.com/wsdl/1.0/VRAPI.wsdl';
  $vr = new soapClient($wsdl);
  if (!empty($session_id)) {
    return $vr;
  }
  $param = array(
    'username' => variable_get('vr_username', NULL),
    'password' => variable_get('vr_password', NULL),
    'session_duration_minutes' => 1,
  );
  try {
    return $vr->login($param);
  }
  catch (Exception $e) {
    watchdog('VerticalResponse API', $e->getMessage());
    return FALSE;
  }
}

/**
 * Create a wrapper function for the VR API
 *
 * @param string
 *  API method.
 * @param array
 *  arguments required by API method.
 * @param bool
 *  use drupal_set_message to display SOAP exceptions
 */
function vr_api($method, $param = array(), $error_message = FALSE) {
  static $session_id;
  if (empty($session_id)) {
    $session_id = _vr_init();
    return ($session_id) ? vr_api($method, $param) : FALSE;
  }
  else {
    $param['session_id'] = $session_id;
    $vr = _vr_init($session_id);
    try {
      return $vr->$method($param);
    }
    catch (Exception $e) {
      if ($error_message == TRUE) {
        drupal_set_message($e->getMessage(), 'error');
      }
      watchdog('VerticalResponse API', $e->getMessage());
    }
  }
}

/**
 * hook_forms implementation
 *
 * Route all vr_list field forms to a form builder function.  This should
 * allow each field to have its own theme and form_alter functions.
 */
function vr_forms() {
  $fields = content_fields();
  $forms = array();
  foreach ($fields as $field) {
    if ($field['type'] == 'vr_list') {
      $name = $field['field_name'];
      $forms['vr_subscribe_' . $name] = array(
        'callback' => 'vr_subscribe_form',
        );
    }
  }
  return $forms;
}


/**
 * Create a form that allows users to subscribe to a mailing list
 */
function vr_subscribe_form(&$form_state, $lists) {
  global $user;
  $form['email_address'] = array(
    '#type' => 'textfield',
    '#title' => t('Email Address'),
    '#required' => TRUE,
    '#default_value' => $user->mail,
  );
  // Create different form fields for subscription based on the number
  // of lists that are enabled.
  $enabled_lists = count($lists);
  if (empty($enabled_lists)) {
    return array();
  }
  elseif ($enabled_lists == 1) {
    $form['lists'] = array(
      '#type' => 'value',
      '#value' => $lists,
    );
  }
  elseif (count($lists) > 1) {
    $form['lists'] = array(
      '#type' => 'checkboxes',
      '#options' => $lists,
      );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Subscribe'),
  );

  // Add validation and submit handlers
  $form['#validate'][] = 'vr_subscribe_form_validate';
  $form['#submit'][] = 'vr_subscribe_form_submit';
  return $form;
}

/**
 * Validate form data and create member_data array.
 *
 * A custom implementation could use hook_form_alter to add an extra validation
 * function to the member_data array.
 */
function vr_subscribe_form_validate($form, &$form_state) {
  // Confirm that email address is valid
  $mail = $form_state['values']['email_address'];
  if (valid_email_address($mail)) {
    $form_state['values']['member_data'][] = array(
      'name' => 'email_address',
      'value' => $mail,
      );
  }
  else {
    form_set_error('email_address', t('Invalid email address'));
  }
  // Confirm that this user is not alredy registered for this list.
  $param['field_name'] = 'email_address';
  $param['field_value'] = $form_state['values']['email_address'];

  foreach ($form_state['values']['lists'] as $list_id => $value) {
    if (empty($value)) {
      continue;
    }
    $param['list_id'] = $list_id;
    $subscriber = vr_api('searchListMembers', $param);
    if (!empty($subscriber)) {
      $tokens = array(
        '@mail' => $mail,
        '@list' => $subscriber[0]->list_name,
        );
      form_set_error('email_address', t('@mail is already subscribed to "@list".', $tokens));
    }
  }
}

/**
 * Subscribe a user to a mailing list
 */
function vr_subscribe_form_submit($form, &$form_state) {
  foreach ($form_state['values']['lists'] as $list_id => $value) {
    $param['list_member'] = array(
      'list_id' => $list_id,
      'member_data' => $form_state['values']['member_data'],
      );
    if (!empty($value)) {
      vr_api('addListMember', $param);
      $tokens = array(
        '@mail' => $form_state['values']['email_address'],
        '@list' => $form['lists']['#options'][$list_id]
                 ? $form['lists']['#options'][$list_id]
                 : $form_state['values']['lists'][$list_id],
        );
      drupal_set_message(t('@mail has been subscribed to @list', $tokens));
    }
  }
}

/**
 * hook_field_info implementation
 */
function vr_field_info() {
  return array(
    'vr_list' => array(
      'label' => t('VerticalResponse Mailing List'),
      'description' => t('Allow users to sign-up for a mailing list.'),
      ),
    );
}

/**
 * hook_field_settings implementation
 */
function vr_field_settings($op, $field) {
  switch ($op) {
    case 'database columns':
      $columns['value'] = array(
        'type' => 'int',
        'unsigned' => TRUE,
        'views' => TRUE,
        );
      return $columns;
      break;
  }
}

/**
 * Implementation of hook_content_is_empty().
 *
 * CCK has no way to know if something like a zero is
 * an empty value or a valid value, so return
 * TRUE or FALSE to a populated field $item array.
 * CCK uses this to remove empty multi-value elements
 * from forms.
 */
function vr_content_is_empty($item, $field) {
  if (empty($item['value'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * hook_widget_info implementation
 */
function vr_widget_info() {
  // Warn user if VerticalResponse is not configured.
  _vr_init();
  return array(
    'vr_list_widget' => array(
      'label' => t('VerticalResponse'),
      'field types' => array('vr_list'),
      ),
    );
}

/**
 * hook_widget implementation
 */
function vr_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element['value'] = array(
    '#type' => 'select',
    '#title' => t('Mailing Lists'),
    '#options' => vr_get_lists(array('null_option' => TRUE)),
    '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : NULL,
    );
  return $element;
}

/**
 * Implementation of hook_field_formatter_info().
 *
 * All fields should have a 'default' formatter.
 * Any number of other formatters can be defined as well.
 * It's nice for there always to be a 'plain' option
 * for the raw value, but that is not required.
 *
 */
function vr_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Default'),
      'field types' => array('vr_list'),
      'multiple values' => CONTENT_HANDLE_MODULE,
      ),
    );
}

/**
 * Display vr_lists as a signup form.
 */
function theme_vr_formatter_default($element) {
  static $processed;
  $field_name = $element['#field_name'];
  if (empty($processed[$field_name])) {
    $lists = array();
    foreach ($element as $key => $list) {
      if (strpos($key, '#') !== 0) {
        $value = $list['#item']['value'];
        $lists[$value] = $value;
      }
    }
    $lists = array_intersect_key(vr_get_lists(), $lists);
    $processed = TRUE;
    return drupal_get_form('vr_subscribe_' . $field_name, $lists);
  }
}

/**
 * hook_theme implementation
 */
function vr_theme($existing, $type, $theme, $path) {
  return array(
    'vr_formatter_default' => array(
      'arguments' => array('forums' => array()),
      ),
    'vr_list_pager' => array(
      'arguments' => array('list_id' => NULL),
      'file' => 'vr.theme',
      ),
    'vr_list_controls' => array(
      'arguments' => array(),
      'file' => 'vr.theme',
      ),
    );
}

/**
 * Return an array of mailing lists from VerticalResponse where
 * the list id is the key and the list name is the value.
 *
 * List information is cahced. The cache can be rebuild by setting the
 * "reset" argument to TRUE.
 *
 * @param array
 *  An array of options.
 *    null_option: inserts a null key with the value "-- Select One --"
 *    object: an array of objects is returned when this is set to TRUE, an array
 *      of list names when it is set to FALSE
 *    reset: FALSE by default, refreshes cached information when set to TRUE.
 * @param boolean
 *  return the whole list object
 */
function vr_get_lists($options = array()) {
  // Set up fluid arguments.
  $object = (empty($options['object'])) ? FALSE : $options['object'];
  $null_option = (empty($options['null_option'])) ? FALSE : $options['null_option'];
  $reset = (empty($options['reset'])) ? FALSE : $options['reset'];

  static $vr_lists;
  if (empty($vr_lists) OR $reset == TRUE) {
    $param['include_field_info'] = TRUE;
    $lists = vr_api('enumerateLists', $param);
    if ($null_option == TRUE) {
      $vr_lists[] = t('-- None --');
    }
    foreach ($lists as $list) {
      if ($list->type == 'optin' OR $list->type == 'email') {
        $vr_lists[$list->id] = ($object == TRUE) ? $list : t($list->name);
      }
    }
  }
  return (!empty($vr_lists)) ? $vr_lists : array();
}

/**
 * Return VerticalResponse List object by list id.
 *
 * @param string
 *  list id
 * @return mixed
 *  VerticalResponse list object is a list is found, FALSE if
 *  no list has the provided id.
 */
function vr_get_list_by_id($list_id, $reset = FALSE) {
  $options = array('null_option' => FALSE, 'object' => TRUE, 'reset' => $reset);
  $lists = vr_get_lists($options);
  if (!is_array($lists)) {
    return FALSE;
  }
  return (!empty($lists[$list_id])) ? $lists[$list_id] : FALSE;
}

/**
 * Provide order_by_fields parameter for API call.
 *
 * @param string
 *  The VerticalResponse field_name on which to sort.
 * @param string
 *  Sort direction (asc, desc).
 * @param array
 *  Header argument from theme_table.
 * @param string
 *  The field_name to sort on if none is provided.
 * @return array
 *
 */
function vr_sort_param($order_by, $direction, $header, $default = 'Name') {
  // Provide default sort options.
  if (empty($order_by)) {
    $order_by = $default;
    $direction = 'asc';
  }
  // Apply sort filters.
  if (!empty($order_by)) {
    $param['order_by_fields'] = array(
      array(
        'field_name' => vr_sort_field($header, $order_by),
        'direction' => $direction,
        ),
      );
  }
  else {
    $param = array();
  }
  return $param;
}

/**
 * @param array
 *  Header argument from theme_table
 * @param string
 */
function vr_sort_field($header, $sort) {
  foreach ($header as $column) {
    if ($sort == $column['data']) {
      return $column['field'];
    }
  }
}